#!/bin/bash

# What is the project called
project_name='Arx'

project_buildlogs_url='https://arx-libertatis.org/buildlogs/arx/'

default_cmake_options+=' -DUNITY_BUILD=0'
default_cmake_options+=' -DBUILD_ALL=1'
default_cmake_options+=' -DICON_TYPE=none'
default_cmake_options+=' -DRUN_TESTS=1'

# Some additional arx-specific build options
cmake_options[debugout]='-DDEBUG=1'
cmake_options[unity]='-DUNITY_BUILD=1'
cmake_options[xtra]='-DDEBUG_EXTRA=1 -DSET_NOISY_WARNING_FLAGS=1'
cmake_options[boostfs]='-DUSE_NATIVE_FS=0'

# The environments for these don't have Qt installed - disable the crash reporter & profiler
cmake_options[gcc-freebsd-9.1-i686]+=" -DBUILD_CRASHREPORTER=0 -DBUILD_PROFILER=0"
cmake_options[gcc-freebsd-9.1-x86-64]+=" -DBUILD_CRASHREPORTER=0 -DBUILD_PROFILER=0"
cmake_options[gcc-armv6j-hf]+=" -DBUILD_CRASHREPORTER=0 -DBUILD_PROFILER=0"
cmake_options[mingw]+=" -DBUILD_PROFILER=0"
cmake_options[static]+=" -DEpoxy_USE_STATIC_LIBS=0" # TODO

# Newer Qt versions require the CMake compile feature "cxx_decltype", but
# CMake does not support compile feature detection for these compilers
arx_no_qt="-DBUILD_CRASHREPORTER=0 -DBUILD_PROFILER=0"
cmake_options[clang-3.3]+=" $arx_no_qt"

arx_no_tests="-DBUILD_TESTS=0"
cmake_options[olddeps]+=" -DWITH_SDL=1 -DWITH_OPENGL=glew"
cmake_options[prebuilt-icons]="-DICON_TYPE=\"ico;icns;iconset;png\""
cmake_options[prebuilt-icons]+=" -DDATA_FILES=\"$deps/arx-libertatis-data-git/\""
cmake_options[build-icons]="-DICON_TYPE=all"
cmake_options[msvc-11.0-x86]+=" $arx_no_tests"
cmake_options[msvc-12.0-x86]+=" $arx_no_tests"
cmake_options[msvc-12.0-x64]+=" $arx_no_tests"
cmake_options[msvc-14.0-x86]+=" $arx_no_tests $arx_no_qt"
cmake_options[msvc-14.0-x64]+=" $arx_no_tests $arx_no_qt"
cmake_options[msvc-14.11-x86]+=" $arx_no_tests $arx_no_qt"
cmake_options[msvc-14.11-x64]+=" $arx_no_tests $arx_no_qt"
cmake_options[msvc-14.12-x86]+=" $arx_no_tests"
cmake_options[msvc-14.12-x64]+=" $arx_no_tests"
cmake_options[msvc-14.13-x86]+=" $arx_no_tests"
cmake_options[msvc-14.13-x64]+=" $arx_no_tests"
cmake_options[msvc-14.14-x86]+=" $arx_no_tests"
cmake_options[msvc-14.14-x64]+=" $arx_no_tests"
cmake_options[msvc-14.15-x86]+=" $arx_no_tests"
cmake_options[msvc-14.15-x64]+=" $arx_no_tests"
cmake_options[msvc-14.16-x86]+=" $arx_no_tests"
cmake_options[msvc-14.16-x64]+=" $arx_no_tests"
cmake_options[msvc-14.20-x86]+=" $arx_no_tests"
cmake_options[msvc-14.20-x64]+=" $arx_no_tests"
cmake_options[msvc-14.21-x86]+=" $arx_no_tests"
cmake_options[msvc-14.21-x64]+=" $arx_no_tests"
cmake_options[msvc-14.22-x86]+=" $arx_no_tests"
cmake_options[msvc-14.22-x64]+=" $arx_no_tests"
cmake_options[msvc-14.23-x86]+=" $arx_no_tests"
cmake_options[msvc-14.23-x64]+=" $arx_no_tests"
cmake_options[msvc-14.24-x86]+=" $arx_no_tests"
cmake_options[msvc-14.24-x64]+=" $arx_no_tests"
cmake_options[msvc-14.25-x86]+=" $arx_no_tests"
cmake_options[msvc-14.25-x64]+=" $arx_no_tests"
cmake_options[msvc-analyzer]+=" $arx_no_tests"

cmake_options[gcc-armv6j-hf]+=" -DRUN_TARGET='qemu-arm;-L;/usr/armv6j-hardfloat-linux-gnueabi/'"
cmake_options[gcc-freebsd-9.1-i686]+=" -DRUN_TESTS=0"
cmake_options[gcc-freebsd-9.1-x86-64]+=" -DRUN_TESTS=0"
cmake_options[clang-3.3]+=" -DRUN_TESTS=0"
cmake_options[clang-3.4]+=" -DRUN_TESTS=0"
cmake_options[clang-3.5]+=" -DRUN_TESTS=0"
cmake_options[clang-3.6]+=" -DRUN_TESTS=0"
cmake_options[clang-3.7]+=" -DRUN_TESTS=0"
cmake_options[clang-3.8]+=" -DRUN_TESTS=0"
cmake_options[clang-3.9]+=" -DRUN_TESTS=0"
cmake_options[mingw]+=" -DRUN_TARGET='$toolchains/run.cpp;wine'"
cmake_options[gcc-dev]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=/opt/gcc-dev/lib64/:/opt/gcc-dev/lib32/:$LD_LIBRARY_PATH'"
cmake_options[gcc-analyzer]+=" -DUSE_LTO=0" # OOM

cmake_options[gcc-4.7]+=' -DUSE_LTO=0' # Fails to link
cmake_options[msvc-14.0-x64]+=' -DUSE_LTO=0' # ICE

# TODO Non-lambda BOOST_SCOPE_EXIT implementatin is broken on newer ICC
cxx_compiler_options[icc]+=" -DBOOST_SCOPE_EXIT_CONFIG_USE_LAMBDAS"

# Compiler for builds that test library/config compatability
default_compiler='gcc-9'
old_compiler='gcc-4.9'

# Declare directories containing source code (for cppcheck and flawfinder)
source_directories+=(
	"$repo/tools"
)
include_directories+=(
	-I "$repo/tools"
)

# TODO temp workaround for clang + libc++ + unity build = OOM/crash
cxx_compiler_options[libcxx]+=" -fPIE"

clang_tidy_options+=(
	-exclude='moc_ArxProfiler.cpp'
	-exclude='moc_ErrorReportDialog.cpp'
	-exclude='moc_QHexEdit.cpp'
	-exclude='moc_QHexEditPrivate.cpp'
	-exclude='qrc_CrashReporter.cpp'
	-exclude='stb_image.cpp'
)
# TODO https://clang.llvm.org/extra/clang-tidy/checks/readability-identifier-naming.html
clang_tidy_checks+=(
	"${clang_tidy_checks_nocxx11[@]}" # TODO Enable these once we move to C++11
	'-cppcoreguidelines-pro-type-vararg' # Variadic function used for asserts
	'-readability-magic-numbers' # Too noisy and not very useful
)
clang_tidy_checks_relaxed+=(
	# TODO Consider fixing and enabling these
	'-bugprone-branch-clone'
	'-bugprone-integer-division'
	'-bugprone-narrowing-conversions'
	'-cert-err34-c'
	'-cert-err58-cpp'
	'-cppcoreguidelines-interfaces-global-init'
	'-cppcoreguidelines-pro-type-cstyle-cast' # enable once we can use lambdas for BOOST_SCOPE_EXIT
	'-cppcoreguidelines-pro-type-member-init'
	'-cppcoreguidelines-special-member-functions'
	'-google-runtime-int'
	'-misc-non-private-member-variables-in-classes'
	'-readability-braces-around-statements'
	'-readability-convert-member-functions-to-static'
	'-readability-else-after-return'
	'-readability-isolate-declaration'
	'-readability-misleading-indentation'
	'-readability-redundant-access-specifiers' # conflicts with Qt signal and slot sections
)
clang_tidy_config['bugprone-assert-side-effect.AssertMacros']='"arx_assert,arx_assert_msg"'
clang_tidy_config['cppcoreguidelines-no-malloc.Deallocations']='""'
clang_tidy_config['google-runtime-int.SignedTypePrefix']='"s"'
clang_tidy_config['google-runtime-int.TypeSuffix']='""'
clang_tidy_config['google-runtime-int.UnsignedTypePrefix']='"u"'
clang_tidy_config['llvm-namespace-comment.ShortNamespaceLines']='10'

cppcheck_options+=(
	-i 'stb_image.cpp'
)

# TODO Enable thse once we move to C++11
ignore_warnings['cppcheck*']+='|overrides a function in a base class but is not marked'

merge_config olddeps cmake-2.8.3
merge_config olddeps curl-7.20.0
merge_config olddeps boost-1.48
merge_config olddeps sdl-1.2.10
merge_config olddeps openal-soft-1.0.38
merge_config olddeps glew-1.5.2
merge_config olddeps freetype-2.3.0
merge_config olddeps glm-0.9.5.0
merge_config olddeps prebuilt-icons
count_warnings["*olddeps*"]='(Rendering|Generating|Scaling) .*\.(svg|png|ico)'

merge_config newdeps cmake-dev
merge_config newdeps boost-git
merge_config newdeps glm-git
merge_config newdeps build-icons
merge_config newdeps libepoxy-1.2 # not really new

# glm/detail/setup.hpp:456:100: note: #pragma message: GLM: GCC older than 4.6 has a bug presenting the use of rgba and stpq components
merge_config gcc-4.4 glm-0.9.5.0
merge_config gcc-4.5 glm-0.9.5.0

# GLM 0.9.9.0 drops support for older compilers
merge_config gcc-4.6 glm-0.9.8.5
merge_config gcc-4.7 glm-0.9.8.5
merge_config clang-3.3 glm-0.9.8.5

# OpenAL build requires newer libstdc++
merge_config gcc-4.4 openal-soft-1.0.38
merge_config gcc-4.5 openal-soft-1.0.38
merge_config gcc-4.6 openal-soft-1.0.38
merge_config gcc-4.7 openal-soft-1.0.38

merge_config m32 qt-5.1-32

# Finally, define the used build types.
# Each build type is an underscore-seperated list of tokens defined in
# cmake_options, compiler_options and make_options.
build_types=(
	
	# Static analyzers and style checks
	
	'clang-analyzer'
	'clang-analyzer_unity'
	
	'gcc-analyzer'
	
	'msvc-analyzer_unity'
	
	'clang-tidy_strict'
	'clang-tidy_relaxed'
	
	'cppcheck'
	
	'flawfinder'
	
	'shellcheck'
	
	# Test different build types
	
	$default_compiler
	$default_compiler'_unity_debug'
	$default_compiler'_unity_static'
	$default_compiler'_static_lto'
	'gcc-dev_unity_xtra'
	'clang-dev_libcxx_unity_xtra'
	'msvc-14.25-x64_unity_xtra'
	
	# Test different compilers/stdlibs and versions
	
	'clang-3.3_libcxx_debug'
	'clang-3.3_libcxx_unity'
	
	'clang-3.4_libcxx_debug'
	'clang-3.4_libcxx_unity'
	
	'clang-3.5_libcxx_debug'
	'clang-3.5_libcxx_unity'
	
	'clang-3.6_libcxx_debug'
	'clang-3.6_libcxx_unity'
	
	'clang-3.7_libcxx_debug'
	'clang-3.7_libcxx_unity'
	
	'clang-3.8_libcxx_debug'
	'clang-3.8_libcxx_unity'
	
	'clang-3.9_libcxx_debug'
	'clang-3.9_libcxx_unity'
	
	'clang-4_libcxx_debug'
	'clang-4_libcxx_unity'
	
	'clang-5_libcxx_debug'
	'clang-5_libcxx_unity'
	
	'clang-6_libcxx_debug'
	'clang-6_libcxx_unity'
	
	'clang-7_libcxx_debug'
	'clang-7_libcxx_unity'
	
	'clang-8_libcxx_debug'
	'clang-8_libcxx_unity'
	
	'clang-9_libcxx_debug'
	'clang-9_libcxx_unity'
	
	'clang-10_libcxx_debug'
	'clang-10_libcxx_unity'
	
	'clang-dev_libcxx_debug'
	'clang-dev_libcxx_unity'
	
	'clang-dev_libcxx_m32_debug'
	
	'clang-dev_libstdcxx_debug'
	'clang-dev_libstdcxx_unity'
	
	'icc_debug'
	'icc_unity'
	
	'gcc-4.4_debug'
	'gcc-4.4_unity'
	
	'gcc-4.5_debug'
	'gcc-4.5_unity'
	
	'gcc-4.6_debug'
	'gcc-4.6_unity'
	
	'gcc-4.7_debug'
	'gcc-4.7_unity'
	
	'gcc-4.8_debug'
	'gcc-4.8_unity'
	
	'gcc-4.9_debug'
	'gcc-4.9_unity'
	
	'gcc-5_debug'
	'gcc-5_unity'
	
	'gcc-6_debug'
	'gcc-6_unity'
	
	'gcc-7_debug'
	'gcc-7_unity'
	
	'gcc-8_debug'
	'gcc-8_unity'
	
	'gcc-9_debug'
	'gcc-9_unity'
	
	'gcc-dev_debug'
	'gcc-dev_unity'
	
	'mingw_debugout_lto'
	'mingw_unity_lto'
	
	'msvc-11.0-x86_unity'
	
	'msvc-12.0-x86_debug'
	'msvc-12.0-x64_unity'
	
	'msvc-14.0-x86_debug'
	'msvc-14.0-x64_unity'
	
	'msvc-14.11-x64_unity'
	
	'msvc-14.12-x64_unity'
	
	'msvc-14.13-x64_unity'
	
	'msvc-14.14-x64_unity'
	
	'msvc-14.15-x64_unity'
	
	'msvc-14.16-x64_unity'
	
	'msvc-14.20-x64_unity'
	
	'msvc-14.21-x64_unity'
	
	'msvc-14.22-x64_unity'
	
	'msvc-14.23-x64_unity'
	
	'msvc-14.24-x64_unity'
	
	'msvc-14.25-x86_unity'
	'msvc-14.25-x64_unity'
	'msvc-14.25-x64_debug'
	
	# Test different architectures
	
	$default_compiler'_m32_debug'
	$default_compiler'_m32'
	
	'gcc-freebsd-9.1-i686_unity_lto'
	'gcc-freebsd-9.1-x86-64_unity_lto'
	
	'gcc-armv6j-hf_unity_lto'
	
	'gcc-bindist-i686_unity_lto'
	'gcc-bindist-x86-64_unity_lto'
	
	# Test different library versions
	
	'gcc-4.9_debug_boost-1.48_boostfs'
	'gcc-4.9_debug_boost-1.49_boostfs'
	'gcc-4.9_debug_boost-1.50_boostfs'
	'gcc-4.9_debug_boost-1.51_boostfs'
	'gcc-4.9_debug_boost-1.52_boostfs'
	'gcc-4.9_debug_boost-1.53_boostfs'
	'gcc-4.9_debug_boost-1.54_boostfs'
	'gcc-4.9_debug_boost-1.55_boostfs'
	'gcc-4.9_debug_boost-1.56_boostfs'
	'gcc-4.9_debug_boost-1.57_boostfs'
	'gcc-4.9_debug_boost-1.58_boostfs'
	'gcc-4.9_debug_boost-1.59_boostfs'
	'gcc-4.9_debug_boost-1.60_boostfs'
	'gcc-4.9_debug_boost-1.61_boostfs'
	'gcc-4.9_debug_boost-1.62_boostfs'
	'gcc-4.9_debug_boost-1.63_boostfs'
	'gcc-4.9_debug_boost-1.64_boostfs'
	'gcc-9_debug_boost-1.65_boostfs'
	'gcc-9_debug_boost-1.66_boostfs'
	'gcc-9_debug_boost-1.67_boostfs'
	'gcc-9_debug_boost-1.68_boostfs'
	'gcc-9_debug_boost-1.69_boostfs'
	'gcc-9_debug_boost-1.70_boostfs'
	'gcc-9_debug_boost-1.71_boostfs'
	'gcc-9_debug_boost-1.72_boostfs'
	
	$old_compiler'_olddeps_unity'
	$old_compiler'_olddeps_debug'
	$default_compiler'_newdeps_unity'
	$default_compiler'_newdeps_debug'
	$default_compiler'_newdeps_unity_m32'
	'clang-dev_libcxx_newdeps_unity'
	
	# TODO 'include-what-you-use'
	
	'style'
	'style_xtra'
	
)

favicons['/favicon.ico']=''
favicons['/images/arx-libertatis.png']='128x128'
favicons['/favicon.png']='16x16'

covertiy_scan_project='1656'
travis_ci_project='arx/ArxLibertatis'
appveyor_project='dscharrer/arxlibertatis'

commit_url=https://github.com/arx/ArxLibertatis/commits/

# Sanity check configuration for release targets
boostfs='Filesystem backend\: Boost'
nocrashhandler='Features\: (\(none\)|profiler instrumentation)'
expected_symbols='dirfd|fstatat|fpathconf|_PC_NAME_MAX|readlink|fcntl|chdir|open|fork|dup2'
expected_symbols+='|pipe|read|close|posix_spawnp|execvp|isatty|waitpid|kill|gepid|sigaction'
expected_symbols+='|getcwd|clock_gettime|setenv|unsetenv|popen|pclose'
count_config_warnings['gcc-bindist*']="$boostfs|$nocrashhandler|Looking for ($expected_symbols) \\- not found"
count_config_warnings['gcc-freebsd*']="$boostfs|$nocrashhandler|Looking for (sysctl(byname)?|$expected_symbols) \\- not found"
count_config_warnings['mingw*']="$boostfs"
count_config_warnings['msvc*']="$boostfs|$nocrashhandler"

ignore_warnings['clang*xtra*']='padding .* to alignment boundary'
ignore_warnings["gcc-9*m32*"]="\-Wnoexcept"
ignore_warnings['gcc-4.9*debug*']='unistd.*\: read(link)? called with bigger length than size of( the)? destination buffer'
ignore_warnings['gcc-8*debug*']='\-Warray\-bounds'
ignore_warnings['gcc*xtra*']='padding struct size to alignment boundary'
