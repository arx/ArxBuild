#!/bin/bash

# What is the project called
project_name='Arx'

project_buildlogs_url='https://arx-libertatis.org/buildlogs/arx/'

default_cmake_options+=' -DUNITY_BUILD=0'
default_cmake_options+=' -DBUILD_ALL=1'
default_cmake_options+=' -DICON_TYPE=none'
default_cmake_options+=' -DRUN_TESTS=1'

# Some additional arx-specific build options
cmake_options[debugout]='-DDEBUG=1'
cmake_options[unity]='-DUNITY_BUILD=1'
cmake_options[xtra]='-DDEBUG_EXTRA=1 -DSET_NOISY_WARNING_FLAGS=1 -DUSE_LDGOLD=0 -DUSE_LD=default'
cmake_options[boostfs]='-DUSE_NATIVE_FS=0'

# The environments for these don't have Qt installed - disable the crash reporter & profiler
cmake_options[gcc-freebsd-9.1-i686]+=" -DBUILD_CRASHREPORTER=0 -DBUILD_PROFILER=0"
cmake_options[gcc-freebsd-9.1-x86-64]+=" -DBUILD_CRASHREPORTER=0 -DBUILD_PROFILER=0"
cmake_options[gcc-armv6j-hf]+=" -DBUILD_CRASHREPORTER=0 -DBUILD_PROFILER=0"
cmake_options[mingw]+=" -DBUILD_PROFILER=0"
cmake_options[static]+=" -DEpoxy_USE_STATIC_LIBS=0 -DFreetype_USE_STATIC_LIBS=0" # TODO

# Newer Qt versions require the CMake compile feature "cxx_decltype", but
# CMake does not support compile feature detection for these compilers
arx_no_qt="-DBUILD_CRASHREPORTER=0 -DBUILD_PROFILER=0"

arx_no_tests="-DBUILD_TESTS=0"
cmake_options[libcxx]+=" -DWITH_QT=5" # TODO need libcxx build of Qt6 for QUnhandledException::QUnhandledException(std::exception_ptr)
cmake_options[olddeps]+=" -DWITH_SDL=1 -DWITH_OPENGL=glew -DWITH_QT=5"
cmake_options[prebuilt-icons]="-DICON_TYPE=\"ico;icns;iconset;png\""
cmake_options[prebuilt-icons]+=" -DDATA_FILES=\"$deps/arx-libertatis-data-git/\""
cmake_options[build-icons]="-DICON_TYPE=all"
cmake_options[msvc-14.15-x86]+=" $arx_no_tests"
cmake_options[msvc-14.15-x64]+=" $arx_no_tests"
cmake_options[msvc-14.16-x86]+=" $arx_no_tests"
cmake_options[msvc-14.16-x64]+=" $arx_no_tests"
cmake_options[msvc-14.20-x86]+=" $arx_no_tests"
cmake_options[msvc-14.20-x64]+=" $arx_no_tests"
cmake_options[msvc-14.21-x86]+=" $arx_no_tests"
cmake_options[msvc-14.21-x64]+=" $arx_no_tests"
cmake_options[msvc-14.22-x86]+=" $arx_no_tests"
cmake_options[msvc-14.22-x64]+=" $arx_no_tests"
cmake_options[msvc-14.23-x86]+=" $arx_no_tests"
cmake_options[msvc-14.23-x64]+=" $arx_no_tests"
cmake_options[msvc-14.24-x86]+=" $arx_no_tests"
cmake_options[msvc-14.24-x64]+=" $arx_no_tests"
cmake_options[msvc-14.25-x86]+=" $arx_no_tests"
cmake_options[msvc-14.25-x64]+=" $arx_no_tests"
cmake_options[msvc-14.26-x86]+=" $arx_no_tests"
cmake_options[msvc-14.26-x64]+=" $arx_no_tests"
cmake_options[msvc-14.27-x86]+=" $arx_no_tests"
cmake_options[msvc-14.27-x64]+=" $arx_no_tests"
cmake_options[msvc-14.28-x86]+=" $arx_no_tests"
cmake_options[msvc-14.28-x64]+=" $arx_no_tests"
cmake_options[msvc-14.29-x86]+=" $arx_no_tests"
cmake_options[msvc-14.29-x64]+=" $arx_no_tests"
cmake_options[msvc-analyzer]+=" $arx_no_tests"

cmake_options[gcc-armv6j-hf]+=" -DRUN_TARGET='qemu-arm;-L;/usr/armv6j-hardfloat-linux-gnueabi/'"
cmake_options[gcc-freebsd-9.1-i686]+=" -DRUN_TESTS=0"
cmake_options[gcc-freebsd-9.1-x86-64]+=" -DRUN_TESTS=0"
cmake_options[mingw]+=" -DRUN_TARGET='$toolchains/run.cpp;wine'"
cmake_options[clang-5]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/clang-14/lib64/:$deps/clang-14/lib/:\$LD_LIBRARY_PATH'"
cmake_options[clang-6]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/clang-14/lib64/:$deps/clang-14/lib/:\$LD_LIBRARY_PATH'"
cmake_options[clang-7]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/clang-14/lib64/:$deps/clang-14/lib/:\$LD_LIBRARY_PATH'"
cmake_options[clang-8]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/clang-14/lib64/:$deps/clang-14/lib/:\$LD_LIBRARY_PATH'"
cmake_options[clang-9]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/clang-14/lib64/:$deps/clang-14/lib/:\$LD_LIBRARY_PATH'"
cmake_options[clang-10]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/clang-14/lib64/:$deps/clang-14/lib/:\$LD_LIBRARY_PATH'"
cmake_options[clang-11]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/clang-14/lib64/:$deps/clang-14/lib/:\$LD_LIBRARY_PATH'"
cmake_options[clang-12]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/clang-14/lib64/:$deps/clang-14/lib/:\$LD_LIBRARY_PATH'"
cmake_options[clang-13]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/clang-14/lib64/:$deps/clang-14/lib/:\$LD_LIBRARY_PATH'"
cmake_options[clang-14]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/clang-14/lib64/:$deps/clang-14/lib/:\$LD_LIBRARY_PATH'"
cmake_options[boost-1.69]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/boost-1.69/lib:\$LD_LIBRARY_PATH'"
cmake_options[boost-1.77]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/boost-1.77/lib:\$LD_LIBRARY_PATH'"
cmake_options[boost-1.78]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/boost-1.78/lib:\$LD_LIBRARY_PATH'"
cmake_options[boost-1.79]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/boost-1.79/lib:\$LD_LIBRARY_PATH'"
cmake_options[boost-1.80]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/boost-1.80/lib:\$LD_LIBRARY_PATH'"
cmake_options[boost-1.81]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/boost-1.81/lib:\$LD_LIBRARY_PATH'"
cmake_options[boost-1.82]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/boost-1.82/lib:\$LD_LIBRARY_PATH'"
cmake_options[boost-1.83]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/boost-1.83/lib:\$LD_LIBRARY_PATH'"
cmake_options[boost-1.84]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/boost-1.84/lib:\$LD_LIBRARY_PATH'"
cmake_options[boost-1.85]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=$deps/boost-1.85/lib:\$LD_LIBRARY_PATH'"
cmake_options[gcc-7]+=" -DWITH_QT=5" # missing std::Filesystem
cmake_options[gcc-dev]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=/opt/gcc-dev/lib64/:/opt/gcc-dev/lib32/:\$LD_LIBRARY_PATH'"
cmake_options[gcc-analyzer]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=/opt/gcc-dev/lib64/:/opt/gcc-dev/lib32/:\$LD_LIBRARY_PATH'"
cmake_options[gcc-analyzer]+=" -DUSE_LTO=0" # OOM
cmake_options[clang-dev]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=/opt/secret-llvm-dev/lib64/:/opt/secret-llvm-dev/lib32/:\$LD_LIBRARY_PATH'"
cmake_options[clang-analyzer]+=" -DRUN_TARGET='env;LD_LIBRARY_PATH=/opt/secret-llvm-dev/lib64/:/opt/secret-llvm-dev/lib32/:\$LD_LIBRARY_PATH'"

cmake_options[msvc-14.0-x64]+=' -DUSE_LTO=0' # ICE

# Compiler for builds that test library/config compatability
default_compiler='gcc-13'
old_compiler='gcc-7'

# Declare directories containing source code (for cppcheck and flawfinder)
source_directories+=(
	"$repo/tools"
)
include_directories+=(
	-I "$repo/tools"
)

# TODO temp workaround for clang + libc++ + unity build = OOM/crash
cxx_compiler_options[libcxx]+=" -fPIE"

clang_tidy_options+=(
	-exclude='moc_ArxProfiler.cpp'
	-exclude='moc_ErrorReportDialog.cpp'
	-exclude='moc_QHexEdit.cpp'
	-exclude='moc_QHexEditPrivate.cpp'
	-exclude='qrc_CrashReporter.cpp'
	-exclude='stb_image.cpp'
)
# TODO https://clang.llvm.org/extra/clang-tidy/checks/readability-identifier-naming.html
clang_tidy_checks+=(
	"${clang_tidy_checks_nocxx20[@]}"
	'-bugprone-standalone-empty' # buggy af - ICEs and false positives
	'-cppcoreguidelines-pro-type-vararg' # Variadic function used for asserts
	'-readability-magic-numbers' # Too noisy and not very useful
)
clang_tidy_checks_relaxed+=(
	# TODO Consider fixing and enabling these
	'-bugprone-branch-clone'
	'-bugprone-easily-swappable-parameters'
	'-bugprone-implicit-widening-of-multiplication-result'
	'-bugprone-integer-division'
	'-bugprone-narrowing-conversions'
	'-bugprone-switch-missing-default-case'
	'-bugprone-unused-return-value'
	'-cert-err33-c'
	'-cert-err58-cpp'
	'-concurrency-mt-unsafe'
	'-cppcoreguidelines-macro-usage'
	'-cppcoreguidelines-prefer-member-initializer'
	'-cppcoreguidelines-pro-type-member-init'
	'-cppcoreguidelines-rvalue-reference-param-not-moved'
	'-cppcoreguidelines-special-member-functions'
	'-cppcoreguidelines-virtual-class-destructor'
	'-google-global-names-in-headers'
	'-google-readability-casting'
	'-google-runtime-int'
	'-misc-const-correctness'
	'-misc-include-cleaner'
	'-misc-non-private-member-variables-in-classes'
	'-misc-use-anonymous-namespace'
	'-misc-use-internal-linkage'
	'-modernize-avoid-c-arrays'
	'-modernize-deprecated-headers'
	'-modernize-loop-convert'
	'-modernize-macro-to-enum'
	'-modernize-raw-string-literal'
	'-modernize-return-braced-init-list'
	'-modernize-use-auto'
	'-modernize-use-default-member-init'
	'-modernize-use-designated-initializers'
	'-modernize-use-nodiscard'
	'-modernize-use-nullptr'
	'-modernize-use-using'
	'-performance-enum-size'
	'-readability-braces-around-statements'
	'-readability-convert-member-functions-to-static'
	'-readability-else-after-return'
	'-readability-enum-initial-value'
	'-readability-identifier-length'
	'-readability-isolate-declaration'
	'-readability-qualified-auto'
	'-readability-redundant-access-specifiers' # conflicts with Qt signal and slot sections
	'-readability-redundant-inline-specifier'
	'-readability-simplify-boolean-expr'
	'-readability-suspicious-call-argument'
	'-readability-use-anyofallof'
	'-readability-use-std-min-max'
)
clang_tidy_config['bugprone-assert-side-effect.AssertMacros']='"arx_assert,arx_assert_msg"'
clang_tidy_config['cppcoreguidelines-no-malloc.Deallocations']='""'
clang_tidy_config['google-runtime-int.SignedTypePrefix']='"s"'
clang_tidy_config['google-runtime-int.TypeSuffix']='""'
clang_tidy_config['google-runtime-int.UnsignedTypePrefix']='"u"'
clang_tidy_config['llvm-namespace-comment.ShortNamespaceLines']='10'

include_what_you_use_options+=(
	# TODO --exclude='stb_image.cpp'
)

oclint_jcd_options+=(
	--exclude='stb_image.cpp'
)

cppcheck_options+=(
	-i 'stb_image.cpp'
)

prefix_paths['olddeps']="$qt_gcc48"
merge_config olddeps cmake-3.12
merge_config olddeps curl-7.20.0
merge_config olddeps boost-1.58
merge_config olddeps sdl-1.2.10
merge_config olddeps openal-soft-1.0.38
merge_config olddeps glew-1.5.2
merge_config olddeps freetype-2.3.0
merge_config olddeps glm-0.9.9.7
merge_config olddeps prebuilt-icons
merge_config olddeps cppunit-1.13.0
count_warnings["*olddeps*"]='(Rendering|Generating|Scaling) .*\.(svg|png|ico)'

merge_config newdeps cmake-dev
merge_config newdeps boost-git
merge_config newdeps glm-git
merge_config newdeps build-icons
merge_config newdeps libepoxy-1.2 # not really new
cmake_options[newdeps]+=' -DUSE_CXX17_FROM_CHARS_FLOAT=1'

merge_config static cppunit-1.13.0

merge_config m32 qt-5.1-32

# Finally, define the used build types.
# Each build type is an underscore-seperated list of tokens defined in
# cmake_options, compiler_options and make_options.
build_types=(
	
	# Static analyzers and style checks
	
	'clang-analyzer'
	'clang-analyzer_unity'
	
	'gcc-analyzer'
	
	'msvc-analyzer_unity'
	
	'clang-tidy_strict'
	'clang-tidy_relaxed'
	
	'cppcheck'
	
	'flawfinder'
	
	'shellcheck'
	
	# Test different build types
	
	$default_compiler
	$default_compiler'_unity_debug'
	$default_compiler'_unity_static'
	$default_compiler'_static_lto'
	'gcc-dev_unity_xtra'
	'clang-dev_libcxx_unity_xtra'
	'msvc-14.29-x64_unity_xtra'
	
	# Test different compilers/stdlibs and versions
	
	'clang-5_libcxx_debug'
	'clang-5_libcxx_unity'
	
	'clang-6_libcxx_debug'
	'clang-6_libcxx_unity'
	
	'clang-7_libcxx_debug'
	'clang-7_libcxx_unity'
	
	'clang-8_libcxx_debug'
	'clang-8_libcxx_unity'
	
	'clang-9_libcxx_debug'
	'clang-9_libcxx_unity'
	
	'clang-10_libcxx_debug'
	'clang-10_libcxx_unity'
	
	'clang-11_libcxx_debug'
	'clang-11_libcxx_unity'
	
	'clang-12_libcxx_debug'
	'clang-12_libcxx_unity'
	
	'clang-13_libcxx_debug'
	'clang-13_libcxx_unity'
	
	'clang-14_libcxx_debug'
	'clang-14_libcxx_unity'
	
	'clang-15_libcxx_debug'
	'clang-15_libcxx_unity'
	
	'clang-16_libcxx_debug'
	'clang-16_libcxx_unity'
	
	'clang-17_libcxx_debug'
	'clang-17_libcxx_unity'
	
	'clang-18_libcxx_debug'
	'clang-18_libcxx_unity'
	
	'clang-dev_libcxx_debug'
	'clang-dev_libcxx_unity'
	
	'clang-dev_libcxx_m32_debug'
	
	'clang-dev_libstdcxx_debug'
	'clang-dev_libstdcxx_unity'
	
	'gcc-7_debug'
	'gcc-7_unity'
	
	'gcc-8_debug'
	'gcc-8_unity'
	
	'gcc-9_debug'
	'gcc-9_unity'
	
	'gcc-10_debug'
	'gcc-10_unity'
	
	'gcc-11_debug'
	'gcc-11_unity'
	
	'gcc-12_debug'
	'gcc-12_unity'
	
	'gcc-13_debug'
	'gcc-13_unity'
	
	'gcc-dev_debug'
	'gcc-dev_unity'
	
	'mingw_debugout_lto'
	'mingw_unity_lto'
	
	'msvc-14.15-x86_debug'
	'msvc-14.15-x64_unity'
	
	'msvc-14.16-x64_unity'
	
	'msvc-14.20-x64_unity'
	
	'msvc-14.21-x64_unity'
	
	'msvc-14.22-x64_unity'
	
	'msvc-14.23-x64_unity'
	
	'msvc-14.24-x64_unity'
	
	'msvc-14.25-x64_unity'
	
	'msvc-14.26-x64_unity'
	
	'msvc-14.27-x64_unity'
	
	'msvc-14.28-x64_unity'
	
	'msvc-14.29-x86_unity'
	'msvc-14.29-x64_unity'
	'msvc-14.29-x64_debug'
	
	# Test different architectures
	
	$default_compiler'_m32_debug'
	$default_compiler'_m32'
	$default_compiler'_m32_unity'
	
	'gcc-armv6j-hf_unity_lto'
	
	'gcc-bindist-i686_unity_lto'
	'gcc-bindist-x86-64_unity_lto'
	
	# Test different library versions
	
	'gcc-7_debug_boost-1.58'
	'gcc-7_debug_boost-1.59'
	'gcc-7_debug_boost-1.60'
	'gcc-7_debug_boost-1.61'
	'gcc-7_debug_boost-1.62'
	'gcc-7_debug_boost-1.63'
	'gcc-7_debug_boost-1.64'
	'gcc-10_debug_boost-1.65_boostfs'
	'gcc-10_debug_boost-1.66_boostfs'
	'gcc-10_debug_boost-1.67_boostfs'
	'gcc-10_debug_boost-1.68_boostfs'
	'gcc-10_debug_boost-1.69_boostfs'
	'gcc-10_debug_boost-1.70_boostfs'
	'gcc-10_debug_boost-1.71_boostfs'
	'gcc-10_debug_boost-1.72_boostfs'
	'gcc-10_debug_boost-1.73_boostfs'
	'gcc-10_debug_boost-1.74_boostfs'
	'gcc-11_debug_boost-1.75_boostfs'
	'gcc-11_debug_boost-1.76_boostfs'
	'gcc-11_debug_boost-1.77_boostfs'
	'gcc-11_debug_boost-1.78_boostfs'
	'gcc-11_debug_boost-1.79_boostfs'
	'gcc-12_debug_boost-1.80_boostfs'
	'gcc-12_debug_boost-1.81_boostfs'
	'gcc-12_debug_boost-1.82_boostfs'
	'gcc-12_debug_boost-1.83_boostfs'
	'gcc-12_debug_boost-1.84_boostfs'
	'gcc-12_debug_boost-1.85_boostfs'
	
	$old_compiler'_olddeps_unity'
	$old_compiler'_olddeps_debug'
	'gcc-dev_newdeps_unity'
	'gcc-dev_newdeps_debug'
	'gcc-dev_newdeps_m32'
	'clang-dev_libcxx_newdeps_unity'
	
	'include-what-you-use'
	'oclint'
	
	'style'
	'style_xtra'
	
)

favicons['/favicon.ico']=''
favicons['/images/arx-libertatis.png']='128x128'
favicons['/favicon.png']='16x16'

covertiy_scan_project='1656'
github_project='arx/ArxLibertatis'
appveyor_project='dscharrer/arxlibertatis'

commit_url=https://github.com/arx/ArxLibertatis/commits/

# Sanity check configuration for release targets
boostfs='Filesystem backend\: Boost'
nocrashhandler='Features\: (\(none\)|profiler instrumentation)'
expected_symbols='dirfd|fstatat|fpathconf|_PC_NAME_MAX|readlink|fcntl|chdir|open|fork|dup2'
expected_symbols+='|pipe|read|close|posix_spawnp|execvp|isatty|waitpid|kill|gepid|sigaction'
expected_symbols+='|getcwd|clock_gettime|setenv|unsetenv|popen|pclose'
count_config_warnings['gcc-bindist*']="$boostfs|$nocrashhandler|Looking for ($expected_symbols) \\- not found"
count_config_warnings['gcc-freebsd*']="$boostfs|$nocrashhandler|Looking for (sysctl(byname)?|$expected_symbols) \\- not found"
count_config_warnings['mingw*']="$boostfs"
count_config_warnings['msvc*']="$boostfs|$nocrashhandler"
count_config_warnings[0]+='|Checking interceptable\: __libcpp_verbose_abort \- unsupported'
count_config_warnings['clang-15*']='Looking for _LIBCPP_ENABLE_ASSERTIONS \- not found'
count_config_warnings['clang-16*']='Looking for _LIBCPP_ENABLE_ASSERTIONS \- not found'
count_config_warnings['clang-17*']='Looking for _LIBCPP_ENABLE_HARDENED_MODE \- not found'
count_config_warnings['clang-18*']='Looking for _LIBCPP_HARDENING_MODE \- not found'
count_config_warnings['clang-dev*']='Looking for _LIBCPP_HARDENING_MODE \- not found'
count_config_warnings['gcc-12*']='Checking interceptable\: __glibcxx_assert_fail \- unsupported'
count_config_warnings['gcc-13*']='Checking interceptable\: __glibcxx_assert_fail \- unsupported'
count_config_warnings['gcc-dev*']='Checking interceptable\: __glibcxx_assert_fail \- unsupported'

ignore_warnings['clang-5*']='\-Wmissing\-braces'
ignore_warnings['clang*xtra*']='padding .* to alignment boundary'
ignore_warnings["gcc-9*m32*"]="\-Wnoexcept"
ignore_warnings['gcc-7*']='\-Warray\-bounds'
ignore_warnings['gcc-8*debug*']='\-Warray\-bounds'
ignore_warnings['gcc*xtra*']='padding struct size to alignment boundary'
