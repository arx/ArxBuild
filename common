#!/bin/bash

# Code shared between autobuild and buildstats.

# Color code escape character.
esc="$(printf '\033')"
disable_color() {
	red='' ; green='' ; yellow='' ; blue='' ; pink='' ; cyan='' ; white=''
	dim_red='' ; dim_green='' ; dim_yellow='' ; dim_blue='' ; dim_pink=''
	dim_cyan='' ; dim_white='' ; reset=''
}
disable_color
if [ -t 1 ] && [ "$(tput colors 2> /dev/null)" != -1 ] ; then
	
	       red="$(printf '\033[1;31m')"
	     green="$(printf '\033[1;32m')"
	    yellow="$(printf '\033[1;33m')"
	      blue="$(printf '\033[1;34m')"
	      pink="$(printf '\033[1;35m')"
	      cyan="$(printf '\033[1;36m')"
	     white="$(printf '\033[1;37m')"
	
	   dim_red="$(printf '\033[0;31m')"
	 dim_green="$(printf '\033[0;32m')"
	dim_yellow="$(printf '\033[0;33m')"
	  dim_blue="$(printf '\033[0;34m')"
	  dim_pink="$(printf '\033[0;35m')"
	  dim_cyan="$(printf '\033[0;36m')"
	 dim_white="$(printf '\033[0;37m')"
	
	     reset="$(printf '\033[0m')"
fi

die() {
	echo "$1"
	exit 1
}

true=0
false=1

force=0
fetch=1
project=''
args=( )
for arg in "$@" ; do
	case "$arg" in
		-f|--force)   force=1 ;;
		-n|--nofetch) fetch=0 ;;
		-p|--project) project=0 ;;
		*) [ -z "$project" ] && project="$arg" && continue
		   args+=( "$arg" )
	esac
done
set -- "${args[@]}"

. "$here/config"
[ -f "$here/projects/$project" ] || die "Unknown project: $project"
. "$here/projects/$project"
[ -f "$here/projects/$project.local" ] && . "$here/projects/$project.local"

html_header() {
	
	local title="$1"
	local toroot="$2"
	
	printf '<!DOCTYPE html>\n'
	printf '<html><head><meta charset="utf-8"><title>%s</title>' "$title"
	for favicon in "${!favicons[@]}" ; do
		case "$favicon" in /*) ;; *) favicon="$toroot/$favicon" ;; esac
		case "$favicon" in
			*.ico)
				printf '<link rel="shortcut icon" href="%s">' "$favicon" ;;
			*)
				sizes="${favicons[$favicon]}"
				printf '<link rel="icon" href="%s" sizes="%s">' "$favicon" "$sizes" ;;
		esac
	done
	printf '<link rel="stylesheet" href="%s/console.css" type="text/css">' "$toroot"
	printf '</head><body>\n'
	
}

html_footer() {
	printf '</body></html>\n'
}

parse_build_type() {
	
	local build_type="$1"
	local out_name="$2"
	
	IFS='_' read -ra components <<< "$build_type"
	
	eval "$2=( ${components[@]} )"
}

in_array() {
	
	local needle="$1"
	
	for entry in "${@:2}" ; do
		if [ "$entry" == "$needle" ] ; then
			true
			return
		fi
	done
	
	false
}

in_wildcard_array() {
	
	local needle="$1"
	
	for entry in "${@:2}" ; do
		if [[ "$needle" == $entry ]] ; then
			true
			return
		fi
	done
	
	false
}

build_suffixes=(
	'.force'
	'.ref'
	'.old'
	'.html'
	'.txt'
	'-config.txt'
	'-options.txt'
	'-raw.txt'
	'-time.txt'
	'-errors.txt'
	'-warnings.txt'
	'-cache.html'
	'-change.txt'
)

rmbuild() {
	name="$1"
	for suffix in "${build_suffixes[@]}" ; do
		file="$name$suffix"
		[ -f "$file" ] && rm "$file"
	done
}

is_valid_branch() {
	
	in_array "$branch" "${ignored_branches[@]}" && return $false
	
	for remote in "${branches[@]}"; do
		[[ "$branch" == "${remote##*/}" ]] && return $true
	done
	
	return $false
}

relative_path() {
	
	local dir="${1%/}"
	local target="$2"
	
	local up=''
	
	# Find the common part of $target and $dir
	while [ ! -z "$dir" ] && [ "${target#$dir}" = "${target}" ] ; do
		[ "${dir%/*}" = "$dir" ] && dir=''
		dir="${dir%/*}"
		up="../$up"
	done
	
	target="${target#$dir}"
	target="${target#/}"
	
	printf '%s' "$up$target"
}
