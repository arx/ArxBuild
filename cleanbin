#!/bin/bash

cd "$(dirname "$0")"; here="$(pwd)"
source "$here/common"

declare -A references

reference_build() {
	
	local file="$1"
	local branch="$2"
	
	local name="${file##*/}"
	local commit=`readlink -m "$file"`
	
	if ! in_array "$name" "${build_types[@]}" ; then
		echo "Removing obsolete build type ${esc}[32m$name${esc}[0m in ${esc}[34m$branch${esc}[0m"
		rm "$file"
		return
	fi
	
	references["$commit"]=1
}

reference_branch() {
	
	local dir="$1"
	
	# Remove obsolete branches.
	branch="${f##*/}"
	obsolete=1
	if ! is_valid_branch "$branch" ; then 
		echo "Removing obsolete branch ${esc}[34m$branch${esc}[0m"
		rm -r "$dir"
		return
	fi
	
	for f in `dir -d $dir/* 2> /dev/null` ; do
		reference_build "$f" "$branch"
	done
	
}

clean_commit() {
	
	local dir="$1"
	
	for f in `dir -d $dir/* 2> /dev/null` ; do
		if [ -z "${references["$(readlink -m "$f")"]}" ] ; then
			rm -r "$f" &> /dev/null
		fi
	done
	
	local commit="${dir##*/}"
	
	# Remove empty directories.
	if [ ! "$(ls -A "$dir")" ]; then
		echo "Removing empty commit dir ${esc}[34m$commit${esc}[0m"
		rmdir "$dir"
	fi
	
}

echo "Cleaning unreferenced binaries..."

branches=(`dir -d $repo/.git/logs/refs/remotes/origin/* 2> /dev/null`)

if [ $build_latest_tag = 1 ] ; then
	latest_tag="$(
		git --git-dir="$repo/.git" describe --tags $(git --git-dir="$repo/.git" rev-list --tags --max-count=1)
	)"
	[ -z "$latest_tag" ] || branches+=( "$latest_tag" )
fi

# Collect referenced commits.
for f in `dir -d $bin/branches/* 2> /dev/null` ; do
	reference_branch "$f"
done

# Clean unreferenced commits.
for f in `dir -d $bin/commits/* 2> /dev/null` ; do
	clean_commit "$f"
done

echo "Done."
