#!/bin/sh

cd "$(dirname "$0")"
here="$(pwd)"

project=$1

source "$here/common"

declare -A references

function reference_build() {
	
	local file="$1"
	local branch="$2"
	
	local name="${file##*/}"
	local commit=`readlink -m "$file"`
	
	if ! in_array "$name" "${build_types[@]}" ; then
		echo "Removing obsolete build type ${esc}[32m$name${esc}[0m in ${esc}[34m$branch${esc}[0m"
		rm "$file"
		return
	fi
	
	references["$commit"]=1
}

function reference_branch() {
	
	local dir="$1"
	
	# Remove obsolete branches.
	branch="${f##*/}"
	obsolete=1
	for remote in "${branches[@]}"; do
		[[ "$branch" == "${remote##*/}" ]] && obsolete=0
	done
	if [ $obsolete == 1 ] ; then 
		echo "Removing obsolete branch ${esc}[34m$branch${esc}[0m"
		rm -r "$dir"
		return
	fi
	
	for f in `dir -d $dir/* 2> /dev/null` ; do
		reference_build "$f" "$branch"
	done
	
}

function clean_commit() {
	
	local dir="$1"
	
	for f in `dir -d $dir/* 2> /dev/null` ; do
		if [ -z "${references["$(readlink -m "$f")"]}" ] ; then
			rm -r "$f" &> /dev/null
		fi
	done
	
	local commit="${dir##*/}"
	
	# Remove empty directories.
	if [ ! "$(ls -A "$dir")" ]; then
		echo "Removing empty commit dir ${esc}[34m$commit${esc}[0m"
		rmdir "$dir"
	fi
	
}

echo "Cleaning unreferenced binaries..."

branches=(`dir -d $repo/.git/logs/refs/remotes/origin/* 2> /dev/null`)

# Collect referenced commits.
for f in `dir -d $bin/branches/* 2> /dev/null` ; do
	reference_branch "$f"
done

# Clean unreferenced commits.
for f in `dir -d $bin/commits/* 2> /dev/null` ; do
	clean_commit "$f"
done

echo "Done."
