#!/bin/bash

cd "$(dirname "$0")" ; here="$(pwd)"
source "$here/common"

declare -A references

reference_build() {
	
	local file="$1"
	local branch="$2"
	
	local name="${file%.ref}"
	local name="${name##*/}"
	local commit=`cat "$file" 2> /dev/null`
	
	if ! in_array "$name" "${build_types[@]}" ; then
		echo "Removing obsolete build type ${esc}[32m$name${esc}[0m in ${esc}[34m$branch${esc}[0m"
		rmbuild "$name"
		return
	fi
	
	references["$commit/$name"]=1
	
}

reference_branch() {
	
	local dir="$1"
	
	# Remove obsolete branches.
	branch="${f##*/}"
	if ! is_valid_branch "$branch" ; then 
		echo "Removing obsolete branch ${esc}[34m$branch${esc}[0m"
		rm -r "$dir"
		return
	fi
	
	for f in `dir -d $dir/*.ref 2> /dev/null` ; do
		reference_build "$f" "$branch"
	done
	
}

clean_build() {
	
	local file="$1"
	
	local name="${file%.ref}"
	local name="${name##*/}"
	local commit=`cat "$file" 2> /dev/null`
	
	if [ ! "$commit" ] ; then
		# Empty commit.
		return
	fi
	
	if [ "${references["$commit/$name"]}" ] ; then
		# Referenced, don't delete
		return
	fi
	
	rmbuild "$logs/commits/$commit/$name"
	
}

clean_commit() {
	
	local dir="$1"
	
	for f in `dir -d $dir/*.ref 2> /dev/null` ; do
		clean_build "$f"
	done
	
	local commit="${dir##*/}"
	
	# Remove empty directories.
	if [ "$(ls -A "$dir")" == "index.html" ]; then
		rm "$dir/index.html"
	fi
	if [ ! "$(ls -A "$dir")" ]; then
		echo "Removing empty commit dir ${esc}[34m$commit${esc}[0m"
		rmdir "$dir"
	fi
	
}

echo "Cleaning unreferenced commit logs..."

branches=(`dir -d $repo/.git/logs/refs/remotes/origin/* 2> /dev/null`)

# Collect referenced commits.
for f in `dir -d $logs/branches/* 2> /dev/null` ; do
	reference_branch "$f"
done

# Clean unreferenced commits.
for f in `dir -d $logs/commits/* 2> /dev/null` ; do
	clean_commit "$f"
done

echo "Done."
