#!/bin/bash

[ -z "$project" ] && project='arx'

# Where the local git repository is located there mus be no changes to the working tree.
repo="$here/repo/$project"

# Directory to use for building.
build="$here/build"

# Temporary directory for logs
stage="$build/.autobuild"

# Where to save the resulting logs. (must end in 'logs' for stats to work)
logs="$here/logs/$project"

# Where to save the resulting binaries.
bin="$here/bin/$project"

# Where to find additional toolchains.
toolchains="$here/toolchains"

deps="$here/deps"

# What part of the checked-out repo to build (location of the CMakeLists.txt)
path=''

boost_no_autodetect='-DBoost_NO_SYSTEM_PATHS=1 -DBoost_NO_BOOST_CMAKE=1'
boost_gcc41="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_52-gcc41/\""
boost_gcc43="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_52-gcc43/\""

set_cmake_toolchain="-DCMAKE_TOOLCHAIN_FILE=$toolchains"

libcxx_libs=""

# Declare possible build options (passed to cmake).
declare -A cmake_options
cmake_options=(
	[gcc-4.1]="\"$set_cmake_toolchain/gcc-4.1-toolchain.cmake\" $boost_gcc41"
	[gcc-4.3]="\"$set_cmake_toolchain/gcc-4.3-toolchain.cmake\" $boost_gcc43"
	[gcc-4.4]="\"$set_cmake_toolchain/gcc-4.4-toolchain.cmake\" $boost_gcc43"
	[gcc-4.5]="\"$set_cmake_toolchain/gcc-4.5-toolchain.cmake\" $boost_gcc43"
	[gcc-4.6]="\"$set_cmake_toolchain/gcc-4.6-toolchain.cmake\""
	[gcc-4.7]="\"$set_cmake_toolchain/gcc-4.7-toolchain.cmake\""
	[gcc-4.8]="\"$set_cmake_toolchain/gcc-4.8-toolchain.cmake\""
	[gcc-4.9]="\"$set_cmake_toolchain/gcc-4.9-toolchain.cmake\""
	[gcc-4.10]="\"$set_cmake_toolchain/gcc-4.10-toolchain.cmake\""
	[gcc-armv6j-hf]="\"$set_cmake_toolchain/armv6j-hardfloat-linux-gnueabi-toolchain.cmake\""
	[gcc-freebsd-9.1-i686]="\"$set_cmake_toolchain/i686-gentoo-freebsd9.1-toolchain.cmake\""
	[gcc-freebsd-9.1-x86_64]="\"$set_cmake_toolchain/x86_64-gentoo-freebsd9.1-toolchain.cmake\""
	[clang]="\"$set_cmake_toolchain/clang-toolchain.cmake\""
	[clang-3.1]="\"$set_cmake_toolchain/clang-3.1-toolchain.cmake\""
	[clang-3.2]="\"$set_cmake_toolchain/clang-3.2-toolchain.cmake\""
	[clang-3.3]="\"$set_cmake_toolchain/clang-3.3-toolchain.cmake\""
	[clang-3.4]="\"$set_cmake_toolchain/clang-3.4-toolchain.cmake\""
	[clang-dev]="\"$set_cmake_toolchain/clang-toolchain.cmake\""
	[ekopath]="\"$set_cmake_toolchain/ekopath-toolchain.cmake\" $boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_55-ekopath/\""
	[icc]="\"$set_cmake_toolchain/icc-toolchain.cmake\""
	[msvc-9.0-32]="\"$set_cmake_toolchain/msvc-9.0-32-toolchain.cmake\" -DCMAKE_BUILD_TYPE=Release"
	[msvc-9.0-64]="\"$set_cmake_toolchain/msvc-9.0-64-toolchain.cmake\" -DCMAKE_BUILD_TYPE=Release"
	[msvc-10.0-32]="\"$set_cmake_toolchain/msvc-10.0-32-toolchain.cmake\" -DCMAKE_BUILD_TYPE=Release"
	[msvc-11.0-32]="\"$set_cmake_toolchain/msvc-11.0-32-toolchain.cmake\" -DCMAKE_BUILD_TYPE=Release"
	[msvc-11.0-64]="\"$set_cmake_toolchain/msvc-11.0-64-toolchain.cmake\" -DCMAKE_BUILD_TYPE=Release"
	[msvc-12.0-32]="\"$set_cmake_toolchain/msvc-12.0-32-toolchain.cmake\" -DCMAKE_BUILD_TYPE=Release"
	[msvc-12.0-64]="\"$set_cmake_toolchain/msvc-12.0-64-toolchain.cmake\" -DCMAKE_BUILD_TYPE=Release"
	[clang-analyzer]="\"$set_cmake_toolchain/clang-analyzer-toolchain.cmake\""
	[include-what-you-use]="\"$set_cmake_toolchain/include-what-you-use-toolchain.cmake\""
	[mingw]="\"$set_cmake_toolchain/mingw-toolchain.cmake\""
	[winstyle]="\"$set_cmake_toolchain/mingw-toolchain.cmake\""
	[winelib]="\"$set_cmake_toolchain/wine-toolchain.cmake\""
	[debug]='-DCMAKE_BUILD_TYPE=Debug'
	[olddeps]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_48/\""
	[boost-1.37]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_37/\""
	[boost-1.39]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_39/\""
	[boost-1.41]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_41/\""
	[boost-1.42]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_42/\""
	[boost-1.45]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_45/\""
	[boost-1.46]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_46/\""
	[boost-1.47]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_47/\""
	[boost-1.48]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_48/\""
	[boost-1.49]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_49/\""
	[boost-1.50]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_50/\""
	[boost-1.51]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_51/\""
	[boost-1.52]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_52/\""
	[boost-1.53]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_53/\""
	[boost-1.54]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_54/\""
	[boost-1.55]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_55/\""
	[libcxx]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1_52-libcxx/\""
	[static]="-DUSE_STATIC_LIBS=1"
)

# Temp: As of version 1.52, parts of Boost don't work with icc in C++11 mode
# TODO see https://svn.boost.org/trac/boost/ticket/7470
# It also causes weird compile errors and warnings :(
cmake_options[icc]+=" -DUSE_CXX11=0"

cmake_options[clang-analyzer]+=" ${cmake_options[libcxx]}"

# Declare possible build options (passed to the compiler).
declare -A compiler_options
compiler_options=(
	[m32]='-m32'
	[libcxx]='-stdlib=libc++'
	[libstdcxx]='' # use default
	[ekopath]='-fstrict-stl'
)

compiler_options[clang-analyzer]+=" ${compiler_options[libcxx]}"

# Declare possible build options (passed to the linker).
declare -A linker_options
linker_options=(
	[m32]='-Wl,--no-warn-search-mismatch'
)

# Declare if a CMake step is required (default is `1`)
declare -A config_required
config_required=(
	[cppcheck]=0
	[flawfinder]=0
)

# Declare directories containing source code (for cppcheck and flawfinder)
source_directories=(
	"$repo/src"
)

# Declare directories containing include files (for cppcheck)
include_directories=(
	-I "$repo/src"
)

# Declare how to build the projects (default is `make -k`).
declare -A make_command
make_command=(
	[style]='make -k style'
	[winstyle]='make -k style'
	[doxygen]='make -k doc'
	# TODO include  "${include_directories[@]}" for better coverage, bit it's slooooooow
	[cppcheck]='cppcheck --quiet --force --enable=style,unusedFunction "${source_directories[@]}"'
	[flawfinder]='flawfinder --quiet --minlevel=3 "${source_directories[@]}"'
)

declare -A prefix_paths
prefix_paths=(
	[libiconv]="$deps/libiconv-1.14"
	[olddeps]="${prefix_paths[olddeps]}\
;$deps/libiconv-1.7\
;$deps/liblzma-5.0.0\
;$deps/SDL-1.2.10\
;$deps/openal-soft-1.0.38\
;$deps/glew-1.5.2\
;$deps/freetype-2.3.0\
;$deps/glm-0.9.2.7\
"
)

# Declare compiler-specific scripts to process build logs.
declare -A process

# Define how buildstats counts errors and warnings.
# Numbered entries are used for all builds.
# For other entries, the key is matched agains the build type.

# Declare patterns that count as a warning.
declare -A count_warnings
count_warnings=(
	[0]='\:\d+\: warning\:'
	['ekopath*']='pathCC WARNING\:'
	['icc*']='warning \#\d+\:'
	['style']='.*\.(cpp|h|hpp)\:\d+\:|Can'"'"'t open for reading'
	['winstyle']='.*\.(cpp|h|hpp)\:\d+\:|Can'"'"'t open for reading'
	['include-what-you-use']='The full include-list for .*\:'
	['msvc-*']='warning [A-Z]+\d+ *\:|\; restarting link with'
	['cppcheck*']='\:\d+]\: \([a-z]'
	['flawfinder*']='\:\d+\: +\[\d+\] \([a-z]'
	['doxygen*']='Warning\:'
)

# Declare patterns that count as an error.
declare -A count_errors
count_errors=(
	[0]='\:\d+\: error\:'
	[1]='\:\d+\: fatal error\:'
	[2]='\: undefined reference to '
	[3]='ld\: cannot find'
	[3]='could not read symbols\: File in wrong format'
	[4]='\: defined in discarded section '
	[5]='ld returned 1 exit status'
	[6]='\: recipe for target .all. failed'
	['icc*']='\: error\:'
	['msvc-*']='error [A-Z]+\d+ *\:'
	['ekopath*']='psclang\: error\:'
)

# Declare patterns for warnings that should be ignored.
declare -A ignore_warnings
ignore_warnings=(
	[0]='ub_.*\.cpp\:\d+\:(\d+\:)? warning\: (\[|ignoring \#pragma message)'
	['ekopath*']='the anonymous namespace'
)

declare -A count_config_warnings
count_config_warnings=(
	[0]='CMake Warning'
	[1]='Could NOT find'
)

declare -A ignore_config_warnings
ignore_warnings=(
)

declare -A count_config_errors
count_config_errors=(
	[0]='Configuring incomplete, errors occurred!'
	[1]='CMake Error'
)

# Declare which build types have known false positive warnings/errors.
false_positives=(
	'include-what-you-use'
	'clang-analyzer*'
	'cppcheck*'
	'flawfinder*'
	'*_xtra'
	'gcc-4.1'
	'gcc-4.1_*'
	'gcc-4.3'
	'gcc-4.3_*'
	'gcc-4.4'
	'gcc-4.4_*'
)

ignored_branches=()

declare -A favicons
favicons=()

# Enable color output on newer GCC versions (4.9+)
export GCC_COLORS=1
