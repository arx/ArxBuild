#!/bin/bash

[ -z "$project" ] && project='arx'

# Where the local git repository is located there mus be no changes to the working tree.
repo="$here/repo/$project"

# Directory to use for building.
build="$here/build"

# Where to save the resulting logs. (must end in 'logs' for stats to work)
logs="$here/logs/$project"

# Where to save the resulting binaries.
bin="$here/bin/$project"

# Where to find additional toolchains.
toolchains="$here/toolchains"

deps="$here/deps"

# What part of the checked-out repo to build (location of the CMakeLists.txt)
path=''

boost_no_autodetect='-DBoost_NO_SYSTEM_PATHS=1 -DBoost_NO_BOOST_CMAKE=1'
boost_gcc41="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.52-gcc41/\""
boost_gcc43="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.52-gcc43/\""
boost_gcc46="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.57-gcc46/\""

set_cmake_toolchain="-DCMAKE_TOOLCHAIN_FILE=$toolchains"

libcxx_libs=""

default_cmake_options=''

# Declare possible build options (passed to cmake).
declare -A cmake_options
cmake_options=(
	[gcc-4.1]="\"$set_cmake_toolchain/gcc-4.1-toolchain.cmake\" $boost_gcc41"
	[gcc-4.3]="\"$set_cmake_toolchain/gcc-4.3-toolchain.cmake\" $boost_gcc43"
	[gcc-4.4]="\"$set_cmake_toolchain/gcc-4.4-toolchain.cmake\" $boost_gcc43"
	[gcc-4.5]="\"$set_cmake_toolchain/gcc-4.5-toolchain.cmake\" $boost_gcc43"
	[gcc-4.6]="\"$set_cmake_toolchain/gcc-4.6-toolchain.cmake\" $boost_gcc46"
	[gcc-4.7]="\"$set_cmake_toolchain/gcc-4.7-toolchain.cmake\" $boost_gcc46"
	[gcc-4.8]="\"$set_cmake_toolchain/gcc-4.8-toolchain.cmake\" $boost_gcc46"
	[gcc-4.9]="\"$set_cmake_toolchain/gcc-4.9-toolchain.cmake\" $boost_gcc46"
	[gcc-5]="\"$set_cmake_toolchain/gcc-5-toolchain.cmake\""
	[gcc-6]="\"$set_cmake_toolchain/gcc-6-toolchain.cmake\""
	[gcc-7]="\"$set_cmake_toolchain/gcc-7-toolchain.cmake\""
	[gcc-armv6j-hf]="\"$set_cmake_toolchain/armv6j-hardfloat-linux-gnueabi-toolchain.cmake\""
	[gcc-freebsd-9.1-i686]="\"$set_cmake_toolchain/i686-gentoo-freebsd9.1-toolchain.cmake\""
	[gcc-freebsd-9.1-x86-64]="\"$set_cmake_toolchain/x86_64-gentoo-freebsd9.1-toolchain.cmake\""
	[gcc-bindist-i686]="\"$set_cmake_toolchain/i686-bindist-linux-gnu-toolchain.cmake\""
	[gcc-bindist-x86-64]="\"$set_cmake_toolchain/x86_64-bindist-linux-gnu-toolchain.cmake\""
	[clang-3.2]="\"$set_cmake_toolchain/clang-3.2-toolchain.cmake\""
	[clang-3.3]="\"$set_cmake_toolchain/clang-3.3-toolchain.cmake\""
	[clang-3.4]="\"$set_cmake_toolchain/clang-3.4-toolchain.cmake\""
	[clang-3.5]="\"$set_cmake_toolchain/clang-3.5-toolchain.cmake\""
	[clang-3.6]="\"$set_cmake_toolchain/clang-3.6-toolchain.cmake\""
	[clang-3.7]="\"$set_cmake_toolchain/clang-3.7-toolchain.cmake\""
	[clang-3.8]="\"$set_cmake_toolchain/clang-3.8-toolchain.cmake\""
	[clang-3.9]="\"$set_cmake_toolchain/clang-3.9-toolchain.cmake\""
	[clang-4]="\"$set_cmake_toolchain/clang-4-toolchain.cmake\""
	[clang-5]="\"$set_cmake_toolchain/clang-5-toolchain.cmake\""
	[clang-dev]="\"$set_cmake_toolchain/clang-toolchain.cmake\""
	[icc]="\"$set_cmake_toolchain/icc-toolchain.cmake\""
	[msvc-9.0-32]="\"$set_cmake_toolchain/msvc-9.0-32-toolchain.cmake\" -DCMAKE_BUILD_TYPE=Release"
	[msvc-9.0-64]="\"$set_cmake_toolchain/msvc-9.0-64-toolchain.cmake\" -DCMAKE_BUILD_TYPE=Release"
	[msvc-10.0-32]="\"$set_cmake_toolchain/msvc-10.0-32-toolchain.cmake\" -DCMAKE_BUILD_TYPE=Release"
	[msvc-11.0-32]="\"$set_cmake_toolchain/msvc-11.0-32-toolchain.cmake\" -DCMAKE_BUILD_TYPE=Release"
	[msvc-11.0-64]="\"$set_cmake_toolchain/msvc-11.0-64-toolchain.cmake\" -DCMAKE_BUILD_TYPE=Release"
	[msvc-12.0-32]="\"$set_cmake_toolchain/msvc-12.0-32-toolchain.cmake\" -DCMAKE_BUILD_TYPE=Release"
	[msvc-12.0-64]="\"$set_cmake_toolchain/msvc-12.0-64-toolchain.cmake\" -DCMAKE_BUILD_TYPE=Release"
	[clang-analyzer]="\"$set_cmake_toolchain/clang-analyzer-toolchain.cmake\""
	[include-what-you-use]="\"$set_cmake_toolchain/include-what-you-use-toolchain.cmake\""
	[mingw]="\"$set_cmake_toolchain/mingw-toolchain.cmake\""
	[winelib]="\"$set_cmake_toolchain/wine-toolchain.cmake\""
	[debug]='-DCMAKE_BUILD_TYPE=Debug'
	[boost-1.37]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.37/\""
	[boost-1.39]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.39/\""
	[boost-1.41]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.41/\""
	[boost-1.42]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.42/\""
	[boost-1.45]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.45/\""
	[boost-1.46]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.46/\""
	[boost-1.47]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.47/\""
	[boost-1.48]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.48/\""
	[boost-1.49]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.49/\""
	[boost-1.50]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.50/\""
	[boost-1.51]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.51/\""
	[boost-1.52]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.52/\""
	[boost-1.53]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.53/\""
	[boost-1.54]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.54/\""
	[boost-1.55]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.55/\""
	[boost-1.56]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.56/\""
	[boost-1.57]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.57/\""
	[boost-1.58]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.58/\""
	[boost-1.59]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.59/\""
	[boost-1.60]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.60/\""
	[boost-1.61]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.61/\""
	[boost-1.62]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.62/\""
	[boost-1.63]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.63/\""
	[boost-1.64]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.64/\""
	[boost-1.65]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.65/\""
	[boost-git]="$boost_no_autodetect \"-DBOOST_INCLUDEDIR=$deps/boost-git/\""
	[libcxx]="$boost_no_autodetect \"-DBOOST_ROOT=$deps/boost-1.65-libcxx/\""
	[static]="-DUSE_STATIC_LIBS=1"
	[lto]="-DUSE_STATIC_LIBS=1"
	[glm-git]="-DCMAKE_INCLUDE_PATH=$deps/glm-git/"
)

cmake_options[clang-analyzer]+=" ${cmake_options[libcxx]}"
cmake_options[clang-tidy]="${cmake_options[clang-dev]} ${cmake_options[libcxx]} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON"

# Declare possible build options (passed to the compiler).
declare -A compiler_options
compiler_options=(
	[m32]='-m32'
	[gcc-armv6j-hf]="-fno-lto"
	[gcc-freebsd-9.1-i686]="-fno-lto"
	[gcc-freebsd-9.1-x86-64]="-fno-lto"
	[gcc-bindist-i686]="-fno-lto"
	[gcc-bindist-x86-64]="-fno-lto"
	[mingw]="-ffat-lto-objects -fno-lto"
	[lto]='-static-libgcc -flto'
)


declare -A c_compiler_options
c_compiler_options=( )

declare -A cxx_compiler_options
cxx_compiler_options=(
	[libstdcxx]='' # use default
	[libcxx]='-stdlib=libc++'
	[clang-analyzer]='-stdlib=libc++'
	[lto]='-static-libstdc++'
)

# Declare possible build options (passed to the linker).
declare -A linker_options
linker_options=(
	[m32]='-Wl,--no-warn-search-mismatch'
	[gcc-armv6j-hf]="-fno-lto"
	[gcc-freebsd-9.1-i686]="-fno-lto"
	[gcc-freebsd-9.1-x86-64]="-fno-lto"
	[gcc-bindist-i686]="-fno-lto"
	[gcc-bindist-x86-64]="-fno-lto"
	[mingw]="-ffat-lto-objects -fno-lto"
	[lto]='-static-libgcc -static-libstdc++ -flto -fuse-linker-plugin'
)

# Declare directories containing source code (for cppcheck and flawfinder)
source_directories=(
	"$repo/src"
)

# Declare directories containing include files (for cppcheck)
include_directories=(
	-I "$repo/src"
)

# cppcheck options
cppcheck_options=(
	--quiet
	--force
	--enable='warning,style,performance,portability,unusedFunction'
)

# Clang Tidy optons
clang_tidy_options=(
	-quiet
	-header-filter='.*' # Otherwise we don't get warnings in headers without corresponding .cpp files
)
clang_tidy_checks=(
	# Enable everything by default so that we will notice new checks
	'*'
	# Disable regular clang wanrings
	'-clang-diagnostic-*' # Already covered by regular builds
	'-clang-analyzer-*' # Already covered by clang-analyzer builds
	# Disable aliases - use the direct name
	'-cert-dcl03-c'
	'-cert-dcl54-cpp'
	'-cert-dcl59-cpp'
	'-cert-err09-cpp'
	'-cert-err61-cpp'
	'-cert-fio38-c'
	'-cert-msc30-c'
	'-cert-oop11-cpp'
	'-cppcoreguidelines-c-copy-assignment-signature'
	'-cppcoreguidelines-no-malloc'
	'-cppcoreguidelines-pro-type-member-init'
	'-cppcoreguidelines-pro-type-vararg'
	'-cppcoreguidelines-special-member-functions'
	'-google-readability-braces-around-statements'
	'-google-readability-function-size'
	'-google-readability-namespace-comments'
	'-google-readability-redundant-smartptr-get'
	'-hicpp-avoid-goto'
	'-hicpp-braces-around-statements'
	'-hicpp-deprecated-headers'
	'-hicpp-explicit-conversions'
	'-hicpp-function-size'
	'-hicpp-invalid-access-moved'
	'-hicpp-move-const-arg'
	'-hicpp-named-parameter'
	'-hicpp-new-delete-operators'
	'-hicpp-no-array-decay'
	'-hicpp-noexcept-move'
	'-hicpp-static-assert'
	'-hicpp-undelegated-constructor'
	'-hicpp-use-auto'
	'-hicpp-use-emplace'
	'-hicpp-use-equals-default'
	'-hicpp-use-equals-delete'
	'-hicpp-use-noexcept'
	'-hicpp-use-nullptr'
	'-hicpp-use-override'
	# Disable warnings that advertise using the GSL support library
	'-cppcoreguidelines-owning-memory'
	'-cppcoreguidelines-pro-bounds-array-to-pointer-decay'
	'-cppcoreguidelines-pro-bounds-constant-array-index'
	'-cppcoreguidelines-pro-bounds-pointer-arithmetic'
	'-cppcoreguidelines-pro-type-union-access'
	# Disable warnings we never want
	'-android-cloexec-fopen' # Suggests nonstandard flags
	'-cppcoreguidelines-pro-type-static-cast-downcast' # Advocates using dynamic_cast
	'-fuchsia-default-arguments' # Completely forbids default arguments
	'-fuchsia-multiple-inheritance' # Forbids non-virtual multiple inheritance
	'-fuchsia-overloaded-operator' # Forbids overloaded operators
	'-fuchsia-statically-constructed-objects' # Forbids static objects
	'-fuchsia-virtual-inheritance' # Forbids virtual inheritance
	'-google-default-arguments' # Forbids default arguments on virtual member functions
	'-google-readability-todo' # Wants usernames in TODOs
	'-hicpp-signed-bitwise' # Warns even on positive integer constants
	'-llvm-header-guard' # Very specific to LLVM
	'-llvm-include-order' # Wants to sort "a/b.hpp" before "b.hpp"
	'-llvm-twine-local' # Very specific to LLVM
	'-readability-implicit-bool-conversion' # These are just too useful
)
clang_tidy_checks_relaxed=(
	'-bugprone-macro-parentheses' # Parentheses are not always correct
	'-bugprone-misplaced-widening-cast' # False positives with enums
	'-cppcoreguidelines-pro-type-const-cast' # Required sometimes to interact with C APIs
	'-cppcoreguidelines-pro-type-reinterpret-cast' # Required sometimes to interact with C APIs
	'-google-explicit-constructor' # Already checkd by `make style` with the option to suppress the warning
	'-llvm-namespace-comment' # Does not recognize the "} } // namespace a::b" syntax
	'-misc-misplaced-widening-cast' # Warns on cast to enum
	'-misc-redundant-expression' # Does not consider that functions might have side effects
	'-modernize-deprecated-headers' # Not always possible
	'-readability-static-accessed-through-instance' # This is actually more readable in many cases
)
clang_tidy_checks_nocxx11=(
	'-modernize-*'
	'modernize-redundant-void-arg'
	'modernize-use-bool-literals'
	'-boost-use-to-string' # std::to_string is C++11-only
)
declare -A clang_tidy_config
clang_tidy_config=(
	['bugprone-argument-comment.StrictMode']=1
	['cppcoreguidelines-pro-type-member-init.IgnoreArrays']=1
	['cppcoreguidelines-special-member-functions.AllowMissingMoveFunctions']=1
	['google-runtime-int.UnsignedTypePrefix']='"std::uint"'
	['google-runtime-int.SignedTypePrefix']='"std::int"'
	['google-runtime-int.TypeSuffix']='"_t"'
	['hicpp-special-member-functions.AllowMissingMoveFunctions']=1
	['readability-implicit-bool-conversion.AllowPointerConditions']=1
)
generate_clang_tidy_config() {
	local checks=''
	local checks_array=( "${clang_tidy_checks[@]}" )
	local args
	parse_build_type "$buildid" 'args'
	for arg in "${args[@]:1}" ; do
		eval "checks_array+=( \"\${clang_tidy_checks_${arg}[@]}\" )"
	done
	for check in "${checks_array[@]}" ; do
		[ -z "$checks" ] || checks+=','
		checks+="$check"
	done
	local options=''
	for option in "${!clang_tidy_config[@]}" ; do
		[ -z "$options" ] || options+=', '
		options+="{ key: \"$option\" , value: ${clang_tidy_config[$option]} }"
	done
	printf "{ Checks: \"%s\", CheckOptions: [%s] }" "$checks" "$options"
}

scan_build="scan-build --use-cc=clang --use-c++=clang++"
scan_build+=" --html-title=\"\$project_name: \$buildid build\""
scan_build+=" -no-failure-reports"

# Configure command (default is "cmake")
declare -A config_command
config_command=(
	[cmake-2.8.0]="\"$deps/cmake-2.8.0/bin/cmake\""
	[cmake-2.8.3]="\"$deps/cmake-2.8.3/bin/cmake\""
	[clang-analyzer]="$scan_build -o \"\$build/config-results\" cmake"
	[cppcheck]="cppcheck --version #"
	[flawfinder]="printf 'Flawfinder ' ; flawfinder --version #"
	[shellcheck]="shellcheck --version #"
)

# Declare how to build the projects (default is `make -k`).
scan_build+=" \$([[ \"\$buildid\" == *unity* ]] && printf '%s' '-analyze-headers')"
declare -A make_command
make_command=(
	[style]='make -k style'
	[doxygen]='make -k doc'
	[cppcheck]='cppcheck "${cppcheck_options[@]}" --cppcheck-build-dir="$PWD" "${source_directories[@]}"'
	[flawfinder]='flawfinder --quiet --minlevel=3 "${source_directories[@]}"'
	[shellcheck]='"$toolchains/shell-analyzer" -f gcc "$repo"'
	[clang-analyzer]="$scan_build -o \"\$build/results\" make -k"
	[clang-tidy]='$toolchains/run-clang-tidy.py -config="$(generate_clang_tidy_config)" "${clang_tidy_options[@]}"'
)

qt_gcc48="$deps/Qt-5.4-gcc48"
cppunit_gcc48="$deps/cppunit-1.13.2-gcc48"
cppunit_libcxx="$deps/cppunit-1.13.2-libcxx"

declare -A prefix_paths
prefix_paths=(
	[curl-7.20.0]="$deps/CURL-7.20.0"
	[libiconv-1.7]="$deps/libiconv-1.7"
	[libiconv-1.14]="$deps/libiconv-1.14"
	[liblzma-5.0.0]="$deps/liblzma-5.0.0"
	[sdl-1.2.10]="$deps/SDL-1.2.10"
	[openal-soft-1.0.38]="$deps/openal-soft-1.0.38"
	[glew-1.5.2]="$deps/glew-1.5.2"
	[libepoxy-1.2]="$deps/libepoxy-1.2"
	[freetype-2.3.0]="$deps/freetype-2.3.0"
	[glm-0.9.5.0]="$deps/glm-0.9.5.0"
	[icc]="$qt_gcc48"
	[gcc-4.3]="$qt_gcc48;$cppunit_gcc48"
	[gcc-4.4]="$qt_gcc48;$cppunit_gcc48"
	[gcc-4.5]="$qt_gcc48;$cppunit_gcc48"
	[gcc-4.6]="$qt_gcc48;$cppunit_gcc48"
	[gcc-4.7]="$qt_gcc48;$cppunit_gcc48"
	[gcc-4.8]="$qt_gcc48;$cppunit_gcc48"
	[gcc-4.9]="$qt_gcc48;$cppunit_gcc48"
	[libcxx]="$cppunit_libcxx"
	[clang-analyzer]="$cppunit_libcxx"
)

# Define how buildstats counts errors and warnings.
# Numbered entries are used for all builds.
# For other entries, the key is matched agains the build type.

# Declare patterns that count as a warning.
declare -A count_warnings
count_warnings=(
	[0]='\: warning\:'
	[1]='\: Warning\:'
	[2]='\: note\: \#pragma message'
	['icc*']='warning \#\d+\:'
	['style*']='.*\.(cpp|h|hpp)\:\d+\:|Can'"'"'t open for reading'
	['include-what-you-use']='The full include-list for .*\:'
	['msvc-*']='warning [A-Z]+\d+ *\:|\; restarting link with'
	['cppcheck*']='\:\d+]\: \([a-z]'
	['flawfinder*']='\:\d+\: +\[\d+\] \([a-z]'
	['shellcheck*']='\: note\:'
	['doxygen*']='Warning\:'
)

# Declare patterns that count as an error.
declare -A count_errors
count_errors=(
	[0]='\:\d+\: error\:'
	[1]='\:\d+\: fatal error\:'
	[2]='\: undefined reference to '
	[3]='ld\: cannot find'
	[3]='could not read symbols\: File in wrong format'
	[4]='\: defined in discarded section '
	[5]='ld returned 1 exit status'
	[6]='\: recipe for target .all. failed'
	[7]='no makefile found\.  Stop\.'
	[8]='error adding symbols\: File in wrong format'
	[9]='error\: linker command failed'
	[10]='Aborted'
	[11]='Segmentation fault'
	[12]='Bus error'
	['icc*']='\: error\:'
	['msvc-*']='error [A-Z]+\d+ *\:'
)

# Declare patterns for warnings that should be ignored.
declare -A ignore_warnings
ignore_warnings=( )

declare -A count_config_warnings
count_config_warnings=(
	[0]='CMake Warning'
	[1]='Could NOT find'
)

declare -A ignore_config_warnings
ignore_config_warnings=(
)

declare -A count_config_errors
count_config_errors=(
	[0]='Configuring incomplete, errors occurred!'
	[1]='CMake Error'
)

# Declare which build types have known false positive warnings/errors.
false_positives=(
	'include-what-you-use'
	'clang-analyzer*'
	'clang-tidy*strict*'
	'cppcheck*'
	'flawfinder*'
	'shellcheck*'
	'*_xtra'
	'gcc-4.1'
	'gcc-4.1_*'
	'gcc-4.3'
	'gcc-4.3_*'
	'gcc-4.4'
	'gcc-4.4_*'
)

ignored_branches=()

declare -A favicons
favicons=()

# Coverity Scan project id to link to
covertiy_scan_project=''

# Travis CI project id to link to
travis_ci_project=''

# AppVeyor project id to link to
appveyor_project=''

# Enable color output on newer GCC versions (4.9+)
export GCC_COLORS=1

# Required for FindQt4.cmake to work when both Qt4 and Qt5 are installed
# FindQt5.cmake uses installed cmake config files instead of qmake and is not affected by this
export QT_SELECT=4

build_latest_tag=1

default_jobs=1

# Compliers and libraries to not run new builds for (but keep old logs)
disabled_configs=()

commit_url=
