#!/bin/sh

# Where the local git repository is located there mus be no changes to the working tree.
repo="$here/repo"

# Directory to use for building.
build="$here/build"

# Where to save the resulting logs. (must end in 'logs' for stats to work)
logs="$here/logs"

# Where to save the resulting binaries.
bin="$here/bin"

# Where to find additional toolchains.
toolchains="$here/toolchains"

# Location of temporary log files.
log_build="$build/buildlog"
log_config="$build/config.txt"

# What part if the checked-out repo to build (location of the CMakeLists.txt)
path=''

# Declare possible build options (passed to cmake).
declare -A cmake_options
cmake_options=(
	[gcc-4.5]="\"-DCMAKE_TOOLCHAIN_FILE=$toolchains/gcc-4.5-toolchain.cmake\""
	[gcc-4.6]="\"-DCMAKE_TOOLCHAIN_FILE=$toolchains/gcc-4.6-toolchain.cmake\""
	[clang]="\"-DCMAKE_TOOLCHAIN_FILE=$repo/cmake/clang-toolchain.cmake\""
	[ekopath]="\"-DCMAKE_TOOLCHAIN_FILE=$repo/cmake/ekopath-toolchain.cmake\""
	[clang-analyzer]="\"-DCMAKE_TOOLCHAIN_FILE=$toolchains/clang-analyzer-toolchain.cmake\""
	[include-what-you-use]="\"-DCMAKE_TOOLCHAIN_FILE=$toolchains/include-what-you-use-toolchain.cmake\""
	[mingw32]="\"-DCMAKE_TOOLCHAIN_FILE=$repo/cmake/mingw32-toolchain.cmake\" \"-DDXSDK_DIR=$here/DXSDK/\" \"-DCMAKE_LIBRARY_PATH=$here/DXSDK/lib/x86/\""
	[winelib]="\"-DCMAKE_TOOLCHAIN_FILE=$repo/cmake/wine-toolchain.cmake\""
	[dbg]='-DCMAKE_BUILD_TYPE=Debug'
	[opt]='-DCMAKE_BUILD_TYPE=Release'
	[xtra]='-DARX_DEBUG_EXTRA=1'
	[unity]='-DARX_USE_UNITYBUILD=1'
	[minimal]='-DARX_BUILD_EDIT_LOADSAVE=0'
	[boost-1.37]='-DBOOST_INCLUDEDIR=/usr/include/boost-1_37/ -DBOOST_LIBRARYDIR=/usr/lib64/boost-1_37/'
)

declare -A compiler_options
compiler_options=(
	[mingw32]="-isystem /usr/include/wine/windows -isystem $toolchains/mingw32-dx/" # TODO remove!
	[winelib]="-isystem $toolchains/wine-dx/" # TODO remove!
	[m32]='-m32'
	[m64]='-m64'
	[opt]='-O3'
)

declare -A make_options
make_options=(
	[style]='style'
)

# Declare compiler-specific scripts to process build logs.
declare -A process

declare -A count_warnings
count_warnings=(
	[0]='\:\d+\: warning\:'
	['ekopath_*']='pathCC WARNING\:'
	['style']='.*\.(cpp|h|hpp)\:\d+\:|Can'"'"'t open for reading'
	['include-what-you-use']='The full include-list for .*\:'
)

declare -A count_errors
count_errors=(
	[0]='\:\d+\: error\:'
	[1]='\:\d+\: fatal error\:'
	[2]='\:(\d+|\(.*\))\: undefined reference to '
	[3]='ld\: cannot find'
)

declare -A ignore_warnings
ignore_warnings=(
	[0]='ub_.*\.cpp\:\d+\:(\d+\:)? warning\: (\[|ignoring \#pragma message)'
	['ekopath_*']='the anonymous namespace'
)

false_positives=(
	'include-what-you-use'
	'clang-analyzer'
	'*_xtra'
	'ekopath_*_opt'
	'mingw32_*'
)

build_types=(
	
	'clang_m64_dbg'
	'clang_unity_m64_dbg'
	'clang_m32_dbg'
	'clang_m64_opt'
	
	'mingw32_dbg'
	'mingw32_unity_opt'
	
	'winelib_m64_dbg'
	'winelib_unity_m64_opt'
	'winelib_m32_dbg'
	
	'ekopath_m64_dbg'
	
	'gcc-4.5_m64_dbg'
	'gcc-4.5_unity_m64_opt'
	
	'gcc-4.6_m32_dbg'
	'gcc-4.6_m64_dbg'
	'gcc-4.6_unity_m64_dbg'
	
	'gcc-4.6_m32_opt'
	
	'gcc-4.6_m64_opt'
	'gcc-4.6_unity_m64_opt'
	'gcc-4.6_unity_m64_opt_xtra'
	
	'clang-analyzer'
	
	'include-what-you-use'
	
	'gcc-4.6_m64_dbg_minimal'
	'gcc-4.6_unity_m64_opt_minimal'
	
	'gcc-4.6_m64_dbg_boost-1.37'
	
	'style'
	
)
