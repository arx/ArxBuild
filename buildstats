#!/bin/sh

cd "$(dirname "$0")"
here="$(pwd)"

if [ "$1" == '-f' ] ;
	then force='1' ; project=$2
	else force=''  ; project=$1
fi

source "$here/common"

[ "$here/console.css" -nt "$logs/console.css" ] && cp "$here/console.css" "$logs/console.css"

function build_query() {
	
	local name="$1"
	local type="$2"
	
	local query=''
	
	local args
	eval "args=( \"\${!${type}[@]}\" )"
	
	for i in "${args[@]}" ; do
		if [[ "$i" =~ ^[0-9]+$ ]] || [[ "$name" == $i ]] ; then
			
			local value
			eval "value=\"\${${type}['$i']}\""
			
			if [ "$query" == '' ]
				then query="($value)"
				else query="$query|($value)"
			fi
		fi
	done
	
	echo "$query"
}

function count() {
	
	local file="$1"
	local name="$2"
	local type="$3"
	
	local query=`build_query "$name" "count_$type"`
	local ignore=`build_query "$name" "ignore_$type"`
	
	if [ "$query" == '' ] ; then
		echo '0'
		return
	fi
	
	
	#echo "'grep -P \"$query\" \"$file\"'" >> /dev/stderr
	#echo "'$ignore'" >> /dev/stderr
	
	if [ "$ignore" == '' ]
		then grep -P "$query" "$file" |                      wc -l
		else grep -P "$query" "$file" | grep -vP "$ignore" | wc -l
	fi
}

function handle_build() {
	
	local file="$1"
	local allow_false_positives="$2"
	
	local name="${file%.ref}"
	local name="${name##*/}"
	local commit=`cat "$file"`
	
	local has_false_positives=0
	if in_wildcard_array "$name" "${false_positives[@]}" ; then
		local has_false_positives=1
	fi
	if [ $has_false_positives != $allow_false_positives ] ; then
		return
	fi
	
	local loc="commits/$commit/$name"
	local prefix="$logs/$loc"
	
	if [ ! -e "$prefix.txt" ] ; then
		echo "Skipping missing/incomplete '${esc}[33m$name${esc}[0m' at commit ${esc}[34m$commit${esc}[0m"
		return
	fi
	
	local warnings=`count "$prefix.txt" "$name" warnings`
	local errors=`count "$prefix.txt" "$name" errors`
	
	local time=`grep real "$prefix-time.txt" 2> /dev/null`
	local time="${time##* }"
	
	local minutes=`echo "$time" | sed -r 's/^real\t(.*)m(.*)s$/\1/g'`
	local seconds=`echo "$time" | sed -r 's/^real\t(.*)m(.*)s$/\2/g'`
	
	echo "${esc}[34m$name${esc}[0m:   $warnings warnings,   $errors errors,   $minutes min $seconds s"
	
	local wprefix="$toroot/$loc"
	
	local warnings_l='warnings'
	[ "$warnings" = 1 ] && warnings_l='warning&nbsp;'
	local errors_l='errors'
	[ "$errors" = 1 ] && errors_l='error&nbsp;'
	
	echo "<tr>" >> "$index"
	echo "	<td class='n'><a href=\"$wprefix.htm\">$name</td>" >> "$index"
	echo "	<td align=right class='w w$warnings'><b>$warnings</b> $warnings_l</td>" >> "$index"
	echo "	<td align=right class='e e$errors'><b>$errors</b> $errors_l</td>" >> "$index"
	echo "	<td align=right class='tm'>$minutes min</td><td align=right class='ts'>$seconds s</td>" >> "$index"
	echo "	<td><a href=\"$wprefix.txt\">[txt]</a></td>" >> "$index"
	echo "	<td><a href=\"$wprefix-raw.txt\">[raw]</a></td>" >> "$index"
	echo "	<td><a href=\"$wprefix-options.txt\">[opt]</a></td>" >> "$index"
	echo "	<td><a href=\"$wprefix-config.txt\">[cfg]</a></td>" >> "$index"
	echo "</tr>" >> "$index"
	
}

function handle_context() {
	
	local type="$1"
	local dir="$2"
	
	local context="${dir##*/}"
	
	toroot='../..'
	
	context=${dir##*/}
	
	index="$dir/index.htm"
	
	if [ "$dir" -nt "$index" ] || [ "$force" ]
		then echo "Updating '${esc}[36m$context${esc}[0m'..."
		else return
	fi
	
	html_header "$project_name build logs for $type $context" "$toroot" > "$index"
	echo "<h1>Build logs for $type $context</h1>" >> "$index"
	echo "<a href=\"../\">Other Logs</a><br><br>" >> "$index"
	
	echo "<table cellspacing=1 cellpadding=2 class='legit stats'>" >> "$index"
	for f in `dir -d $dir/*.ref 2> /dev/null` ; do
		handle_build "$f" 0
	done
	echo "</table>" >> "$index"
	
	echo "<h2>Build logs that may contain false positives:</h2>" >> "$index"
	echo "<table cellspacing=1 cellpadding=2 class='bogus stats'>" >> "$index"
	for f in `dir -d $dir/*.ref 2> /dev/null` ; do
		handle_build "$f" 1
	done
	echo "</table>" >> "$index"
	
	html_footer >> "$index"
	
}

echo "Updating indices..."

for f in `dir -d $logs/branches/* 2> /dev/null` ; do
	handle_context 'branch' "$f"
done

for f in `dir -d $logs/commits/* 2> /dev/null` ; do
	handle_context 'commit' "$f"
done

echo "Done."
